{
  "_args": [
    [
      {
        "raw": "generator",
        "scope": null,
        "escapedName": "generator",
        "name": "generator",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "c:\\development\\ExpressTest"
    ]
  ],
  "_from": "generator@latest",
  "_id": "generator@1.0.1",
  "_inCache": true,
  "_location": "/generator",
  "_npmUser": {
    "name": "diy",
    "email": "help@diy.org"
  },
  "_npmVersion": "1.2.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "generator",
    "scope": null,
    "escapedName": "generator",
    "name": "generator",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/generator/-/generator-1.0.1.tgz",
  "_shasum": "01fe5f576dab7a1ed51f5e19ef4362a2fe079567",
  "_shrinkwrap": null,
  "_spec": "generator",
  "_where": "c:\\development\\ExpressTest",
  "author": {
    "name": "Andrew Sliwinski",
    "email": "andrewsliwinski@acm.org",
    "url": "http://andrewsliwinski.com"
  },
  "bin": {
    "generator": "./bin/index.js",
    "generate": "./bin/index.js"
  },
  "bugs": {
    "url": "https://github.com/thisandagain/generator/issues"
  },
  "dependencies": {
    "async": "~0.2.9",
    "colors": "~0.6.2",
    "findit": "~0.1.2",
    "fs-extra": "~0.6.3",
    "optimist": "~0.6.0",
    "prompt": "~0.2.11",
    "replace": "~0.2.7"
  },
  "description": "Project bootstrapping with an emphasis on simplicity.",
  "devDependencies": {
    "hint-hint": "~0.3.0",
    "tap": "~0.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "01fe5f576dab7a1ed51f5e19ef4362a2fe079567",
    "tarball": "https://registry.npmjs.org/generator/-/generator-1.0.1.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "homepage": "https://github.com/thisandagain/generator",
  "keywords": [
    "template",
    "scaffold",
    "scaffolding",
    "bootstrap",
    "utility"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "diy",
      "email": "help@diy.org"
    }
  ],
  "name": "generator",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "## Generator [![Build Status](https://secure.travis-ci.org/thisandagain/generator.png)](http://travis-ci.org/thisandagain/generator)\n#### Language agnostic project bootstrapping with an emphasis on simplicity.\n\n![Screenshot](https://raw.github.com/thisandagain/generator/master/interface.png)\n\n### Installation\n```bash\n[sudo] npm install -g generator\n```\n\nOnce installed, you should load the default templates:\n```bash\ngenerate --setup\n```\n\n### Usage\nIn order to bootstrap a project using one of the default templates you simply run `generate` and specifiy a template and project name. For example, let's create a new Node.js module called `kittycannon`:\n```bash\ngenerate --template npm --name kittycannon\n```\n\n---\n\n### Default Templates\nGenerator comes with a few templates to get you started. While they are usable as-is, the whole point of Generator is make the creation of custom templates as simple as possible.\n\n- `npm` [NPM](https://npmjs.org/) module template\n- `arduino` [Arduino](http://www.arduino.cc/) project template\n\n### How Templates Work\nTemplates are simply directories with any combination of files and sub-directories found within them. To create a new template simply create a new directory within your `~/.generator` path or copy one of the default templates and modify it. Upon use, Generator will walk the template looking for any instances of `__somelowercasevariable__` and prompt for a value. For example, a template including this:\n\n```javascript\n/**\n * __description__\n *\n * @package __name__\n * @author __author__ <__email__>\n */\n```\n\nWill prompt:\n```bash\ndescription: Rainbow catsplosion.\nauthor: Nyan Cat\nemail: kitty@meow.com\n```\n\nWhich will generate:\n```javascript\n/**\n * Rainbow catsplosion.\n *\n * @package myAwesomeProject\n * @author Nyan Cat <kitty@meow.com>\n */\n```\n\n---\n\n### Post Processing\nBy default, Generator will look for a `makefile` and (if found) will run `make generator` after all other template processing has been completed. This is particularly handy for dealing with template dependencies that may change over time (like git repositories or even [NPM](https://npmjs.org/) modules). For example:\n\n```bash\ngenerator:\n    npm install\n\n.PHONY: generator\n```\n\nOr... heck, let's go crazy nuts and automate setting up our git repo:\n\n```bash\ngenerator:\n    git init\n    git remote add origin https://github.com/__github__/__name__\n    npm install\n\n.PHONY: generator\n```\n\n---\n\n### Testing\n```bash\nnpm test\n```\n\n### Notes\n- C, C++, and PHP often use the `__SOMETHING__` pattern for [macros](http://gcc.gnu.org/onlinedocs/gcc-3.1/cpp/Standard-Predefined-Macros.html). For this reason, Generator will ignore any variable instances that are specified in caps. This works fine for C and C++ users, but given that such macros in PHP are case insensitive, PHP users should keep this limitation in mind while designing templates.\n- \"Good coders code. Great reuse.\" quote shamelessly stolen from [Peteris Krumins' blog](http://www.catonmat.net/) (which you should read).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thisandagain/generator.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.1"
}
